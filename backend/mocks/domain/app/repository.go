// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package appmocks

import (
	"appstorereviewsviewer/internal/domain/app"

	mock "github.com/stretchr/testify/mock"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type Repository
func (_mock *Repository) FindAll() ([]*app.App, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*app.App
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*app.App, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*app.App); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*app.App)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type Repository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *Repository_Expecter) FindAll() *Repository_FindAll_Call {
	return &Repository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *Repository_FindAll_Call) Run(run func()) *Repository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_FindAll_Call) Return(apps []*app.App, err error) *Repository_FindAll_Call {
	_c.Call.Return(apps, err)
	return _c
}

func (_c *Repository_FindAll_Call) RunAndReturn(run func() ([]*app.App, error)) *Repository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Repository
func (_mock *Repository) Save(app1 *app.App) error {
	ret := _mock.Called(app1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = returnFunc(app1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - app1 *app.App
func (_e *Repository_Expecter) Save(app1 interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", app1)}
}

func (_c *Repository_Save_Call) Run(run func(app1 *app.App)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *app.App
		if args[0] != nil {
			arg0 = args[0].(*app.App)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_Save_Call) Return(err error) *Repository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(app1 *app.App) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}
