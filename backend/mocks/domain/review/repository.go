// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package reviewmocks

import (
	"appstorereviewsviewer/internal/domain/review"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// FindByAppIDSince provides a mock function for the type Repository
func (_mock *Repository) FindByAppIDSince(appID string, since time.Time) ([]*review.Review, error) {
	ret := _mock.Called(appID, since)

	if len(ret) == 0 {
		panic("no return value specified for FindByAppIDSince")
	}

	var r0 []*review.Review
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Time) ([]*review.Review, error)); ok {
		return returnFunc(appID, since)
	}
	if returnFunc, ok := ret.Get(0).(func(string, time.Time) []*review.Review); ok {
		r0 = returnFunc(appID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*review.Review)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = returnFunc(appID, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_FindByAppIDSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAppIDSince'
type Repository_FindByAppIDSince_Call struct {
	*mock.Call
}

// FindByAppIDSince is a helper method to define mock.On call
//   - appID string
//   - since time.Time
func (_e *Repository_Expecter) FindByAppIDSince(appID interface{}, since interface{}) *Repository_FindByAppIDSince_Call {
	return &Repository_FindByAppIDSince_Call{Call: _e.mock.On("FindByAppIDSince", appID, since)}
}

func (_c *Repository_FindByAppIDSince_Call) Run(run func(appID string, since time.Time)) *Repository_FindByAppIDSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_FindByAppIDSince_Call) Return(reviews []*review.Review, err error) *Repository_FindByAppIDSince_Call {
	_c.Call.Return(reviews, err)
	return _c
}

func (_c *Repository_FindByAppIDSince_Call) RunAndReturn(run func(appID string, since time.Time) ([]*review.Review, error)) *Repository_FindByAppIDSince_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Repository
func (_mock *Repository) Save(reviews ...*review.Review) error {
	var tmpRet mock.Arguments
	if len(reviews) > 0 {
		tmpRet = _mock.Called(reviews)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...*review.Review) error); ok {
		r0 = returnFunc(reviews...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - reviews ...*review.Review
func (_e *Repository_Expecter) Save(reviews ...interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{}, reviews...)...)}
}

func (_c *Repository_Save_Call) Run(run func(reviews ...*review.Review)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*review.Review
		var variadicArgs []*review.Review
		if len(args) > 0 {
			variadicArgs = args[0].([]*review.Review)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Repository_Save_Call) Return(err error) *Repository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(reviews ...*review.Review) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}
