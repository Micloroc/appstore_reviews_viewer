// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package addappmocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type UseCase
func (_mock *UseCase) Execute(appID string) error {
	ret := _mock.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(appID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type UseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - appID string
func (_e *UseCase_Expecter) Execute(appID interface{}) *UseCase_Execute_Call {
	return &UseCase_Execute_Call{Call: _e.mock.On("Execute", appID)}
}

func (_c *UseCase_Execute_Call) Run(run func(appID string)) *UseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UseCase_Execute_Call) Return(err error) *UseCase_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UseCase_Execute_Call) RunAndReturn(run func(appID string) error) *UseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}
